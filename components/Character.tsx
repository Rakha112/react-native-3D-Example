/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useGLTF, useTexture } from "@react-three/drei";
import React, { useEffect, useMemo, useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import Model from "../assets/models/Character.glb";
type GLTFResult = GLTF & {
  nodes: {
    vanguard_Mesh: THREE.SkinnedMesh;
    vanguard_visor: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    VanguardBodyMat: THREE.MeshPhysicalMaterial;
    Vanguard_VisorMat: THREE.MeshPhysicalMaterial;
  };
};

const ActionName = "Armature|mixamo.com|Layer0";

export default function Character(props: React.JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    Model
  ) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions[ActionName]?.play();
  }, [actions]);

  const [baseColorMap, normalMap, specularMap] = useTexture([
    require("../assets/models/texture/vanguard_diffuse1.png"),
    require("../assets/models/texture/vanguard_normal.png"),
    require("../assets/models/texture/Image.png"),
  ]);

  const createConfiguredMaterial = (
    originalMaterial: THREE.MeshPhysicalMaterial,
    textures: {
      map?: THREE.Texture;
      normalMap?: THREE.Texture;
      specularMap?: THREE.Texture;
    },
    properties: { metalness: number; roughness: number; ior: number }
  ): THREE.MeshStandardMaterial => {
    const material = originalMaterial.clone();

    if (textures.map) {
      material.map = textures.map;
      textures.map.flipY = false;
    }

    if (textures.normalMap) {
      material.normalMap = textures.normalMap;
      textures.normalMap.flipY = false;
    }

    if (textures.specularMap) {
      material.specularColorMap = textures.specularMap;
      textures.specularMap.flipY = false;
    }

    material.metalness = properties.metalness;
    material.roughness = properties.roughness;
    material.ior = properties.ior;
    material.needsUpdate = true;

    return material;
  };

  const newMaterial = useMemo(
    () =>
      createConfiguredMaterial(
        materials.VanguardBodyMat,
        { map: baseColorMap, normalMap: normalMap, specularMap: specularMap },
        { metalness: 0.5, roughness: 0.553, ior: 1.45 }
      ),
    [materials.VanguardBodyMat, baseColorMap, normalMap, specularMap]
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.02}
          position={[0, -1.5, 0]}
        >
          <skinnedMesh
            name="vanguard_Mesh"
            geometry={nodes.vanguard_Mesh.geometry}
            material={newMaterial}
            skeleton={nodes.vanguard_Mesh.skeleton}
          />
          <skinnedMesh
            name="vanguard_visor"
            geometry={nodes.vanguard_visor.geometry}
            material={newMaterial}
            skeleton={nodes.vanguard_visor.skeleton}
          />
          <primitive object={nodes.mixamorigHips} />
        </group>
      </group>
    </group>
  );
}
